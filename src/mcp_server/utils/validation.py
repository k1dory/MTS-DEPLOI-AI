"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ security checks
"""

import os
import re
import logging
from typing import Optional, Dict, Any
from pathlib import Path

logger = logging.getLogger(__name__)


def validate_k8s_resource_name(name: str, resource_type: str = "resource") -> str:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–º—è Kubernetes —Ä–µ—Å—É—Ä—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ RFC 1123 DNS label

    –ü—Ä–∞–≤–∏–ª–∞:
    - —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã + –¥–µ—Ñ–∏—Å—ã
    - –º–∞–∫—Å–∏–º—É–º 253 —Å–∏–º–≤–æ–ª–∞
    - –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü - –±—É–∫–≤–µ–Ω–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã

    Args:
        name: –ò–º—è —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        resource_type: –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞ (–¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö)

    Returns:
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è

    Raises:
        ValueError: –ï—Å–ª–∏ –∏–º—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º K8s
    """
    if not name:
        raise ValueError(f"K8s {resource_type} name cannot be empty")

    if len(name) > 253:
        raise ValueError(
            f"K8s {resource_type} name too long: {len(name)} chars (max 253). "
            f"Name: '{name[:50]}...'"
        )

    # RFC 1123 DNS label: lowercase alphanumeric + hyphens, must start/end with alphanumeric
    if not re.match(r'^[a-z0-9]([-a-z0-9]*[a-z0-9])?$', name):
        raise ValueError(
            f"Invalid K8s {resource_type} name '{name}'. "
            "Must be lowercase alphanumeric with hyphens, "
            "starting and ending with alphanumeric character. "
            "Examples: 'my-app', 'web-server-1', 'database'"
        )

    logger.debug(f"Validated K8s {resource_type} name: {name}")
    return name


def validate_k8s_namespace(namespace: str) -> str:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–º—è Kubernetes namespace

    Args:
        namespace: –ò–º—è namespace –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏

    Returns:
        –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è namespace

    Raises:
        ValueError: –ï—Å–ª–∏ namespace –Ω–µ –≤–∞–ª–∏–¥–µ–Ω
    """
    # Namespace –∏–º–µ–µ—Ç —Ç–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞ —á—Ç–æ –∏ resource name
    return validate_k8s_resource_name(namespace, resource_type="namespace")


class SecurityValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""

    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
    SECRET_PATTERNS = {
        'api_key': re.compile(r'(api[_-]?key|apikey)["\']?\s*[:=]\s*["\']?([a-zA-Z0-9_\-]{20,})', re.IGNORECASE),
        'password': re.compile(r'password["\']?\s*[:=]\s*["\']?([^"\'\s]{8,})', re.IGNORECASE),
        'token': re.compile(r'(token|bearer)["\']?\s*[:=]\s*["\']?([a-zA-Z0-9_\-\.]{20,})', re.IGNORECASE),
        'aws_key': re.compile(r'(AKIA|aws_access_key_id)[A-Z0-9]{16,}', re.IGNORECASE),
        'private_key': re.compile(r'-----BEGIN [A-Z ]+ PRIVATE KEY-----'),
    }

    @staticmethod
    def validate_env_file(env_path: str = ".env") -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç .env —Ñ–∞–π–ª

        Returns:
            {
                'valid': bool,
                'errors': [],
                'warnings': [],
                'required_keys': []
            }
        """
        result = {
            'valid': True,
            'errors': [],
            'warnings': [],
            'required_keys': []
        }

        env_file = Path(env_path)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        if not env_file.exists():
            result['valid'] = False
            result['errors'].append(f"‚ùå –§–∞–π–ª {env_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            result['warnings'].append("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env")
            return result

        # –ß—Ç–µ–Ω–∏–µ –∏ –ø–∞—Ä—Å–∏–Ω–≥
        try:
            with open(env_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()

            env_vars = {}
            for line_num, line in enumerate(lines, 1):
                line = line.strip()

                # –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
                if not line or line.startswith('#'):
                    continue

                # –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                if '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip().strip('"').strip("'")
                    env_vars[key] = value
                else:
                    result['warnings'].append(f"‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ {line_num}: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
            required_keys = ['ANTHROPIC_API_KEY']
            for key in required_keys:
                if key not in env_vars:
                    result['valid'] = False
                    result['errors'].append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {key}")
                    result['required_keys'].append(key)
                elif not env_vars[key] or env_vars[key] == 'your-api-key-here':
                    result['valid'] = False
                    result['errors'].append(f"‚ùå {key} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Å–æ–¥–µ—Ä–∂–∏—Ç placeholder)")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ API –∫–ª—é—á–∞
            if 'ANTHROPIC_API_KEY' in env_vars:
                api_key = env_vars['ANTHROPIC_API_KEY']
                if not api_key.startswith('sk-ant-'):
                    result['warnings'].append("‚ö†Ô∏è  ANTHROPIC_API_KEY –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-ant-'")

            logger.info(f"‚úÖ .env –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(env_vars)} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            result['valid'] = False
            result['errors'].append(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: {e}")

        return result

    @staticmethod
    def validate_yaml_manifest(yaml_content: str) -> Dict[str, Any]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç YAML –º–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

        Returns:
            {
                'valid': bool,
                'warnings': [],
                'recommendations': []
            }
        """
        result = {
            'valid': True,
            'warnings': [],
            'recommendations': []
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ credentials (–≤ stringData)
        if re.search(r'(stringData|data):\s*\n\s*password:\s*["\']?[^"\'\s]{5,}', yaml_content, re.IGNORECASE):
            result['warnings'].append("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ")
            result['recommendations'].append("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Kubernetes Secrets —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ runAsRoot
        if 'runAsNonRoot: false' in yaml_content:
            result['warnings'].append("‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç root")
            result['recommendations'].append("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è runAsNonRoot: true")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ resource limits
        if 'resources:' not in yaml_content or 'limits:' not in yaml_content:
            result['warnings'].append("‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç resource limits")
            result['recommendations'].append("üí° –î–æ–±–∞–≤—å—Ç–µ CPU –∏ Memory limits")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ privileged mode
        if 'privileged: true' in yaml_content:
            result['warnings'].append("‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è privileged —Ä–µ–∂–∏–º")
            result['recommendations'].append("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ capabilities –≤–º–µ—Å—Ç–æ privileged")

        return result


def validate_api_key(api_key: Optional[str]) -> bool:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç Anthropic API –∫–ª—é—á

    Args:
        api_key: API –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    Returns:
        True –µ—Å–ª–∏ –≤–∞–ª–∏–¥–µ–Ω, False –∏–Ω–∞—á–µ
    """
    if not api_key:
        logger.error("API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return False

    if api_key == 'your-api-key-here':
        logger.error("API –∫–ª—é—á —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder –∑–Ω–∞—á–µ–Ω–∏–µ")
        return False

    if not api_key.startswith('sk-ant-'):
        logger.warning("API –∫–ª—é—á –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-ant-')")
        return False

    if len(api_key) < 20:
        logger.error("API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        return False

    logger.info("‚úÖ API –∫–ª—é—á –ø—Ä–æ—à–µ–ª –±–∞–∑–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    return True


def sanitize_secret_value(value: str, placeholder: str = "***REDACTED***") -> str:
    """
    –ó–∞–º–µ–Ω—è–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ placeholder –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    Args:
        value: –°–µ–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        placeholder: –ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–º–µ—Å—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è

    Returns:
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    if not value or len(value) < 4:
        return placeholder

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞
    return f"{value[:4]}...{value[-4:]}"


def check_file_permissions(file_path: str) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É

    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

    Returns:
        {
            'secure': bool,
            'permissions': str,
            'warnings': []
        }
    """
    result = {
        'secure': True,
        'permissions': 'unknown',
        'warnings': []
    }

    try:
        path = Path(file_path)
        if not path.exists():
            result['secure'] = False
            result['warnings'].append(f"–§–∞–π–ª {file_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return result

        # –ù–∞ Windows –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞
        if os.name == 'nt':
            result['permissions'] = 'windows (–ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞)'
            logger.debug(f"Windows detected - permissions check limited for {file_path}")
        else:
            import stat
            mode = path.stat().st_mode
            result['permissions'] = oct(stat.S_IMODE(mode))

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á—Ä–µ–∑–º–µ—Ä–Ω—ã–µ –ø—Ä–∞–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, world-readable –¥–ª—è .env)
            if stat.S_IROTH & mode:
                result['secure'] = False
                result['warnings'].append(f"‚ö†Ô∏è  –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {e}")
        result['secure'] = False
        result['warnings'].append(f"–û—à–∏–±–∫–∞: {e}")

    return result
