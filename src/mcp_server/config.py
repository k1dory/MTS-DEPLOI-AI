"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MTS Deploy AI
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import os
from typing import Dict, Any


# ========================================
# LLM Configuration
# ========================================

class LLMConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Claude API"""

    # –ú–æ–¥–µ–ª—å Claude (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ .env)
    MODEL = os.getenv("ANTHROPIC_MODEL", "claude-3-5-sonnet-20241022")

    # Temperature –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    TEMP_DETERMINISTIC = 0.2  # –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤ (–º–µ–Ω—å—à–µ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    TEMP_BALANCED = 0.3       # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–±–∞–ª–∞–Ω—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    TEMP_CREATIVE = 0.5       # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏)

    # Max tokens –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    TOKENS_ANALYSIS = 1000      # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–∞ - –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
    TOKENS_PARAMETERS = 1500    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - —Å—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
    TOKENS_OPTIMIZATION = 4000  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤ - –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    TOKENS_DOCUMENTATION = 4000 # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ - –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    TOKENS_CICD = 3000         # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CI/CD - –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç


# ========================================
# Network Configuration
# ========================================

class NetworkConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–π –¥–ª—è —Ç–µ–ª–µ–∫–æ–º-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""

    # –ë–∞–∑–æ–≤–∞—è —Å–µ—Ç—å –¥–ª—è —Ç–µ–ª–µ–∫–æ–º (10.100.x.x –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    BASE_NETWORK = os.getenv("TELECOM_NETWORK_BASE", "10.100")

    # CIDR –º–∞—Å–∫–∞
    NETWORK_CIDR = "/24"

    # –°—Ç–∞—Ä—Ç–æ–≤—ã–π IP –≤ –ø–æ–¥—Å–µ—Ç–∏
    SUBNET_START_IP = "10"
    SUBNET_END_IP = "100"
    SUBNET_GATEWAY_IP = "1"

    @staticmethod
    def get_subnet(index: int) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç subnet –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

        Args:
            index: –ò–Ω–¥–µ–∫—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (0, 1, 2...)

        Returns:
            Subnet –≤ —Ñ–æ—Ä–º–∞—Ç–µ "10.100.0.0/24"
        """
        base = NetworkConfig.BASE_NETWORK
        third_octet = index
        return f"{base}.{third_octet}.0{NetworkConfig.NETWORK_CIDR}"

    @staticmethod
    def get_ip(index: int) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç IP –∞–¥—Ä–µ—Å –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

        Args:
            index: –ò–Ω–¥–µ–∫—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

        Returns:
            IP –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "10.100.0.10"
        """
        base = NetworkConfig.BASE_NETWORK
        third_octet = index
        return f"{base}.{third_octet}.{NetworkConfig.SUBNET_START_IP}"

    @staticmethod
    def get_gateway(index: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç gateway IP –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        base = NetworkConfig.BASE_NETWORK
        third_octet = index
        return f"{base}.{third_octet}.{NetworkConfig.SUBNET_GATEWAY_IP}"


# ========================================
# Docker Configuration
# ========================================

class DockerConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker registry"""

    # Docker registry (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ .env)
    REGISTRY = os.getenv("DOCKER_REGISTRY", "registry.mts.ru")

    # Namespace/organization
    ORGANIZATION = os.getenv("DOCKER_ORGANIZATION", "telecom")

    # –¢–µ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    DEFAULT_TAG = "latest"

    @staticmethod
    def get_image_name(component_type: str, tag: str | None = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è Docker –æ–±—Ä–∞–∑–∞

        Args:
            component_type: –¢–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (5g_upf, billing, etc.)
            tag: –¢–µ–≥ –æ–±—Ä–∞–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: latest)

        Returns:
            –ü–æ–ª–Ω–æ–µ –∏–º—è –æ–±—Ä–∞–∑–∞: "registry.mts.ru/telecom/5g_upf:latest"
        """
        tag = tag or DockerConfig.DEFAULT_TAG
        return f"{DockerConfig.REGISTRY}/{DockerConfig.ORGANIZATION}/{component_type}:{tag}"


# ========================================
# Output Configuration
# ========================================

class OutputConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""

    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
    OUTPUT_DIR = os.getenv("OUTPUT_DIR", "./output")

    # –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
    FILE_ENCODING = "utf-8"

    # –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å YAML –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    VALIDATE_YAML = os.getenv("VALIDATE_YAML", "true").lower() == "true"


# ========================================
# UI Configuration
# ========================================

class UIConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—ã–≤–æ–¥)"""

    @staticmethod
    def _detect_emoji_support() -> bool:
        """–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ emoji –≤ –∫–æ–Ω—Å–æ–ª–∏"""
        import sys

        # Windows console –æ–±—ã—á–Ω–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç emoji
        if os.name == 'nt':
            try:
                encoding = sys.stdout.encoding or 'cp1251'
                return encoding.lower() in ['utf-8', 'utf8']
            except:
                return False
        return True

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∂–∏ –≤ –ª–æ–≥–∞—Ö (–∞–≤—Ç–æ–¥–µ—Ç–µ–∫—Ç –∏–ª–∏ –∏–∑ .env)
    USE_EMOJI = os.getenv("USE_EMOJI", str(_detect_emoji_support())).lower() == "true"

    # –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ (—Å/–±–µ–∑ —ç–º–æ–¥–∂–∏)
    @staticmethod
    def get_symbols() -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ USE_EMOJI"""
        if UIConfig.USE_EMOJI:
            return {
                "success": "‚úÖ",
                "error": "‚ùå",
                "warning": "‚ö†Ô∏è ",
                "info": "‚ÑπÔ∏è ",
                "rocket": "üöÄ",
                "lock": "üîí",
                "search": "üîç",
                "wrench": "üîß",
                "file": "üìÅ",
                "docs": "üìÑ",
                "telecom": "üì°",
                "robot": "ü§ñ",
            }
        else:
            return {
                "success": "[OK]",
                "error": "[ERROR]",
                "warning": "[WARN]",
                "info": "[INFO]",
                "rocket": "[START]",
                "lock": "[SECURE]",
                "search": "[CHECK]",
                "wrench": "[FIX]",
                "file": "[FILE]",
                "docs": "[DOCS]",
                "telecom": "[TELECOM]",
                "robot": "[AI]",
            }


# ========================================
# Secrets Configuration
# ========================================

class SecretsConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤"""

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å placeholders –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    USE_PLACEHOLDERS = True

    # –®–∞–±–ª–æ–Ω placeholder
    PLACEHOLDER_PREFIX = "__PLACEHOLDER_"
    PLACEHOLDER_SUFFIX = "__"

    @staticmethod
    def get_placeholder(name: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç placeholder –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è

        Args:
            name: –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (PASSWORD, API_KEY, etc.)

        Returns:
            Placeholder –≤ —Ñ–æ—Ä–º–∞—Ç–µ "__PLACEHOLDER_PASSWORD__"
        """
        return f"{SecretsConfig.PLACEHOLDER_PREFIX}{name.upper()}{SecretsConfig.PLACEHOLDER_SUFFIX}"

    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–ù–ï –¥–ª—è production!)
    # –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö —Å —è–≤–Ω—ã–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
    DEMO_DATABASE_URL_TEMPLATE = "postgresql://billing_user:{password}@postgres:5432/billing_db"
    DEMO_RABBITMQ_URL_TEMPLATE = "amqp://billing_user:{password}@rabbitmq:5672/"


# ========================================
# Validation Configuration
# ========================================

class ValidationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""

    # –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º (fail on warnings)
    STRICT_MODE = os.getenv("STRICT_MODE", "false").lower() == "true"

    # –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å API –∫–ª—é—á –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    VALIDATE_API_KEY_ON_START = True

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ API –∫–ª—é—á–∞
    MIN_API_KEY_LENGTH = 20


# ========================================
# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤
# ========================================

__all__ = [
    "LLMConfig",
    "NetworkConfig",
    "DockerConfig",
    "OutputConfig",
    "UIConfig",
    "SecretsConfig",
    "ValidationConfig",
]
