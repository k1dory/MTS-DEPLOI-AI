"""
Claude API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
"""

import json
import logging
import asyncio
from typing import Dict, Any, Optional
from pathlib import Path

try:
    from anthropic import Anthropic, AsyncAnthropic
    from anthropic.types import Message, TextBlock
except ImportError:
    logging.error("anthropic –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install anthropic")
    Anthropic = None
    AsyncAnthropic = None
    Message = None
    TextBlock = None

from ..tools.telecom_generator import TelecomGenerator, TELECOM_COMPONENTS
from ..config import LLMConfig
from .prompt_contexts import get_full_context, CONTEXT_5G_ARCHITECTURE, CONTEXT_KUBERNETES_BEST_PRACTICES

logger = logging.getLogger(__name__)


# Timeout wrapper –¥–ª—è LLM –≤—ã–∑–æ–≤–æ–≤
async def with_timeout(coro, timeout: float = 30.0):
    """Wrapper –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è timeout –∫ async –æ–ø–µ—Ä–∞—Ü–∏—è–º"""
    try:
        return await asyncio.wait_for(coro, timeout=timeout)
    except asyncio.TimeoutError:
        raise RuntimeError(f"LLM request timeout after {timeout}s")


class ClaudeClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude API
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–ª–µ–∫–æ–º-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—è LLM
    """

    def __init__(self, api_key: Optional[str] = None):
        if not api_key:
            raise ValueError("ANTHROPIC_API_KEY –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!")

        if not AsyncAnthropic:
            raise ImportError("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ anthropic: pip install anthropic")

        self.client = AsyncAnthropic(api_key=api_key)
        self.telecom_gen = TelecomGenerator()
        self.model = LLMConfig.MODEL

    def _extract_code_block(self, content: str, lang: str | None = None) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –∏–∑ markdown –±–ª–æ–∫–∞"""
        if lang and f"```{lang}" in content:
            return content.split(f"```{lang}")[1].split("```")[0].strip()
        elif "```" in content:
            return content.split("```")[1].split("```")[0].strip()
        return content.strip()

    async def generate_telecom_deployment(
        self,
        prompt: str,
        output_dir: str = "./output"
    ) -> Dict[str, Any]:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç –ø–æ –ø—Ä–æ–º–ø—Ç—É

        Args:
            prompt: –û–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–¥–µ–ø–ª–æ–∏—Ç—å
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        Returns:
            {
                'manifests': {...},
                'documentation': '...',
                'analysis': '...'
            }
        """
        logger.info(f"ü§ñ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–∞: {prompt}")

        # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–∞
        analysis = await self._analyze_prompt(prompt)
        logger.info(f"üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {analysis.get('component_type')}")

        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params = await self._generate_parameters(prompt, analysis)
        logger.info(f"‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params.get('service_name')}")

        # –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã)
        component_type = analysis.get("component_type", "generic")
        service_name = params.get("service_name", "telecom-service")

        manifests = self.telecom_gen.generate_full_stack(
            component_type=component_type,
            service_name=service_name,
            namespace=params.get("namespace", "telecom")
        )

        # –®–∞–≥ 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ LLM
        optimized_manifests = {}
        for filename, content in manifests.items():
            logger.info(f" –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è {filename}...")
            optimized = await self._optimize_manifest(content, prompt, component_type)
            optimized_manifests[filename] = optimized

        # –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        documentation = await self._generate_documentation(
            component_type=component_type,
            service_name=service_name,
            manifests=optimized_manifests,
            prompt=prompt
        )

        return {
            "manifests": optimized_manifests,
            "documentation": documentation,
            "analysis": json.dumps(analysis, indent=2, ensure_ascii=False)
        }

    async def _analyze_prompt(self, prompt: str) -> Dict[str, Any]:
        """
        LLM –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

        Returns:
            {
                'component_type': '5g_upf',
                'region': 'moscow',
                'requirements': [...],
                'service_name': 'moscow-upf'
            }
        """
        # –ü–æ–ª—É—á–∏—Ç—å –ü–û–õ–ù–´–ô –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
        full_context = get_full_context()

        system_prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ–ª–µ–∫–æ–º-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ú–¢–° –∏ Kubernetes —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ 5G –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.

{full_context}

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–ª–µ–∫–æ–º-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
{self._format_components_list()}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á—ë—Ç–æ–º –í–°–ï–ô –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ 5G –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏ best practices.

–û–ø—Ä–µ–¥–µ–ª–∏:
1. **component_type** - –∫–∞–∫–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω—É–∂–Ω–æ –∑–∞–¥–µ–ø–ª–æ–∏—Ç—å (5g_upf, 5g_amf, 5g_smf, billing, etc.)
2. **service_name** - –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ (lowercase, —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, —Å —Ä–µ–≥–∏–æ–Ω–æ–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
3. **region** - —Ä–µ–≥–∏–æ–Ω –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω (moscow, spb, ekb, etc.)
4. **namespace** - kubernetes namespace (default: telecom)
5. **network_interfaces** - –∫–∞–∫–∏–µ 5G –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –Ω—É–∂–Ω—ã (N1-N7), –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –Ω–µ 5G
6. **special_requirements** - –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:
   - high_throughput (>10Gbps)
   - low_latency (<10ms)
   - high_availability (3+ replicas)
   - stateful (—Ç—Ä–µ–±—É–µ—Ç StatefulSet)
   - database_required
   - cache_required
   - queue_required
7. **resource_estimate** - –æ—Ü–µ–Ω–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
8. **security_level** - critical|high|medium|low
9. **node_selector** - —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–æ–¥–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å)

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

–ü—Ä–∏–º–µ—Ä –¥–ª—è "Deploy 5G UPF for Moscow with 10Gbps throughput":
{{
  "component_type": "5g_upf",
  "service_name": "moscow-upf",
  "region": "moscow",
  "namespace": "telecom",
  "network_interfaces": ["n3", "n4", "n6"],
  "special_requirements": ["high_throughput", "high_availability", "low_latency"],
  "resource_estimate": {{
    "cpu": "8",
    "memory": "16Gi",
    "storage": "100Gi",
    "storage_class": "fast-ssd"
  }},
  "security_level": "critical",
  "node_selector": {{
    "mts.ru/node-type": "telecom-workload",
    "mts.ru/zone": "moscow"
  }}
}}
"""

        try:
            response = await with_timeout(
                self.client.messages.create(
                    model=self.model,
                    max_tokens=LLMConfig.TOKENS_ANALYSIS,
                    temperature=LLMConfig.TEMP_BALANCED,
                    system=system_prompt,
                    messages=[{
                        "role": "user",
                        "content": f"–ó–∞–ø—Ä–æ—Å: {prompt}"
                    }]
                ),
                timeout=30.0
            )

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            if not response.content:
                raise ValueError("Empty response from Claude API")

            first_block = response.content[0]
            if hasattr(first_block, 'text'):
                content = first_block.text.strip()
            else:
                raise ValueError(f"Unexpected content type: {type(first_block)}")

            # –ò–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            content = self._extract_code_block(content, "json")

            analysis = json.loads(content)
            return analysis

        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç LLM: {e}")
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content[:200] if 'content' in locals() else 'N/A'}")
            # Fallback: –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
            component_type = self.telecom_gen.identify_component(prompt)
            return {
                "component_type": component_type,
                "service_name": f"{component_type}-service",
                "namespace": "telecom",
                "special_requirements": []
            }
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–º–ø—Ç–∞: {e}", exc_info=True)
            logger.warning("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ fallback —Ä–µ–∂–∏–º")
            # Fallback: –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
            component_type = self.telecom_gen.identify_component(prompt)
            return {
                "component_type": component_type,
                "service_name": f"{component_type}-service",
                "namespace": "telecom",
                "special_requirements": [],
                "error": str(e)
            }

    async def _generate_parameters(
        self,
        prompt: str,
        analysis: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        LLM –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

        Returns:
            {
                'service_name': 'moscow-upf',
                'replicas': 5,
                'namespace': 'telecom',
                'custom_params': {...}
            }
        """
        component_type = analysis.get("component_type", "generic")
        base_config = TELECOM_COMPONENTS.get(component_type, {})

        system_prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Kubernetes –∏ —Ç–µ–ª–µ–∫–æ–º-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ú–¢–° —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ 5G.

{CONTEXT_5G_ARCHITECTURE}
{CONTEXT_KUBERNETES_BEST_PRACTICES}

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {component_type}

–ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
{json.dumps(base_config, indent=2, ensure_ascii=False)}

–ù–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞, –æ–ø—Ä–µ–¥–µ–ª–∏ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —É—á—ë—Ç–æ–º:

1. **replicas** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ø–ª–∏–∫:
   - Critical services (UPF, AMF, SMF, Billing): –º–∏–Ω–∏–º—É–º 3 –¥–ª—è HA
   - High load: 5-10 –¥–ª—è throughput
   - Development: 1-2 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏

2. **namespace** - Kubernetes namespace (default: telecom)

3. **resource_overrides** - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ CPU/Memory –µ—Å–ª–∏ –±–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç:
   - High throughput (>10Gbps): —É–≤–µ–ª–∏—á–∏—Ç—å CPU/Memory
   - Low latency (<10ms): fast-ssd storage
   - Database workload: –±–æ–ª—å—à–µ Memory –¥–ª—è –∫—ç—à–∞

4. **special_config** - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
   - network_interfaces: –¥–ª—è 5G –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (N1-N7)
   - node_affinity: –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–¥–∞—Ö
   - tolerations: –µ—Å–ª–∏ –Ω—É–∂–Ω—ã tainted nodes
   - priority_class: system-cluster-critical –¥–ª—è critical –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

5. **hpa_config** - HorizontalPodAutoscaler –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω autoscaling

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, –≥–æ—Ç–æ–≤—ã–º–∏ –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é.
"""

        try:
            response = await with_timeout(
                self.client.messages.create(
                    model=self.model,
                    max_tokens=LLMConfig.TOKENS_PARAMETERS,
                    temperature=LLMConfig.TEMP_BALANCED,
                    system=system_prompt,
                    messages=[{
                        "role": "user",
                        "content": f"–ó–∞–ø—Ä–æ—Å: {prompt}\n\n–ê–Ω–∞–ª–∏–∑: {json.dumps(analysis, ensure_ascii=False)}"
                    }]
                ),
                timeout=30.0
            )

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            if not response.content:
                raise ValueError("Empty response from Claude API")

            first_block = response.content[0]
            if hasattr(first_block, 'text'):
                content = first_block.text.strip()
            else:
                raise ValueError(f"Unexpected content type: {type(first_block)}")

            # –ò–∑–≤–ª–µ—á—å JSON
            content = self._extract_code_block(content, "json")

            params = json.loads(content)

            # –î–æ–±–∞–≤–∏—Ç—å service_name –∏–∑ analysis
            params["service_name"] = analysis.get("service_name", "telecom-service")
            params["namespace"] = params.get("namespace", "telecom")

            return params

        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content[:200] if 'content' in locals() else 'N/A'}")
            return {
                "service_name": analysis.get("service_name", "telecom-service"),
                "replicas": base_config.get("replicas", 3),
                "namespace": "telecom"
            }
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}", exc_info=True)
            logger.warning(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è {component_type}")
            return {
                "service_name": analysis.get("service_name", "telecom-service"),
                "replicas": base_config.get("replicas", 3),
                "namespace": "telecom",
                "error": str(e)
            }

    async def _optimize_manifest(
        self,
        manifest: str,
        context: str,
        component_type: str
    ) -> str:
        """
        LLM –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç

        Args:
            manifest: YAML –º–∞–Ω–∏—Ñ–µ—Å—Ç
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç)
            component_type: –¢–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

        Returns:
            –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π YAML
        """
        system_prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Kubernetes –¥–ª—è —Ç–µ–ª–µ–∫–æ–º-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ú–¢–° —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ 5G –∏ cloud-native best practices.

{CONTEXT_KUBERNETES_BEST_PRACTICES}

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {component_type}
–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –û–ü–¢–ò–ú–ò–ó–ò–†–£–ô –º–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ú–¢–° Cloud —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:

1. **Labels** - –¥–æ–±–∞–≤—å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ú–¢–° labels:
   - app: <name>
   - component: <type>
   - tier: control-plane|user-plane|backend
   - mts.ru/team: telecom
   - mts.ru/criticality: critical|high|medium|low
   - version: <semantic-version>

2. **Annotations** - –¥–æ–±–∞–≤—å –¥–ª—è observability:
   - mts.ru/owner: telecom-team@mts.ru
   - prometheus.io/scrape: "true"
   - prometheus.io/port: "8080"
   - prometheus.io/path: "/metrics"

3. **Security Context** - —É–±–µ–¥–∏—Å—å —á—Ç–æ:
   - runAsNonRoot: true (–∫—Ä–æ–º–µ UPF)
   - readOnlyRootFilesystem: true (–≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ)
   - capabilities: drop ALL, add —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ
   - seccompProfile: RuntimeDefault

4. **Health Checks** - –ø—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:
   - livenessProbe —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ intervals
   - readinessProbe –¥–ª—è LB
   - startupProbe –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞

5. **Resource Limits** - –ø—Ä–æ–≤–µ—Ä—å:
   - requests –∑–∞–¥–∞–Ω—ã
   - limits = requests * 1.5
   - –î–ª—è critical: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π QoS

6. **High Availability** - –¥–æ–±–∞–≤—å –µ—Å–ª–∏ critical:
   - PodAntiAffinity –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–æ–¥
   - topologySpreadConstraints

7. **Node Placement** - –¥–æ–±–∞–≤—å —Å–µ–ª–µ–∫—Ç–æ—Ä—ã:
   - nodeSelector –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–¥
   - tolerations –µ—Å–ª–∏ –Ω—É–∂–Ω—ã

–í–ê–ñ–ù–û:
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π YAML –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ markdown –±–ª–æ–∫–æ–≤
- –ù–ï –£–î–ê–õ–Ø–ô —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∞–∂–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (Multus CNI, volumes, env vars)
- –°–û–•–†–ê–ù–ò –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
- –ï—Å–ª–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç —É–∂–µ –æ–ø—Ç–∏–º–∞–ª–µ–Ω - –≤–µ—Ä–Ω–∏ –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
"""

        try:
            response = await with_timeout(
                self.client.messages.create(
                    model=self.model,
                    max_tokens=LLMConfig.TOKENS_OPTIMIZATION,
                    temperature=LLMConfig.TEMP_DETERMINISTIC,
                    system=system_prompt,
                    messages=[{
                        "role": "user",
                        "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n\n–ú–∞–Ω–∏—Ñ–µ—Å—Ç:\n```yaml\n{manifest}\n```"
                    }]
                ),
                timeout=30.0
            )

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            if not response.content:
                raise ValueError("Empty response from Claude API")

            first_block = response.content[0]
            if hasattr(first_block, 'text'):
                optimized = first_block.text.strip()
            else:
                raise ValueError(f"Unexpected content type: {type(first_block)}")

            # –ò–∑–≤–ª–µ—á—å YAML
            optimized = self._extract_code_block(optimized, "yaml")

            return optimized

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}. –í–æ–∑–≤—Ä–∞—â–∞—é –æ—Ä–∏–≥–∏–Ω–∞–ª.")
            return manifest

    async def _generate_documentation(
        self,
        component_type: str,
        service_name: str,
        manifests: Dict[str, str],
        prompt: str
    ) -> str:
        """
        LLM –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç runbook (–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –¥–µ–ø–ª–æ—é)

        Returns:
            Markdown –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        """
        config = TELECOM_COMPONENTS.get(component_type, {})

        system_prompt = """
–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å –¥–ª—è –ú–¢–°, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–µ–ø–ª–æ–µ–≤.

–°–æ–∑–¥–∞–π RUNBOOK (–ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é) –¥–ª—è production –¥–µ–ø–ª–æ—è.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. **–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞** - —á—Ç–æ –¥–µ–ª–∞–µ—Ç, –∑–∞—á–µ–º –Ω—É–∂–µ–Ω
2. **Prerequisites** - —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º
3. **Deployment Steps** - –ø–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
4. **Verification** - –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
5. **Monitoring** - —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å
6. **Troubleshooting** - —á–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è
7. **Rollback Procedure** - –∫–∞–∫ –æ—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è

–§–æ—Ä–º–∞—Ç: Markdown
–°—Ç–∏–ª—å: –ß–µ—Ç–∫–∏–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –ú–¢–°
"""

        manifests_text = "\n\n".join([
            f"### {filename}\n```yaml\n{content[:500]}...\n```"
            for filename, content in list(manifests.items())[:3]
        ])

        try:
            response = await with_timeout(
                self.client.messages.create(
                    model=self.model,
                    max_tokens=LLMConfig.TOKENS_DOCUMENTATION,
                    temperature=LLMConfig.TEMP_CREATIVE,
                    system=system_prompt,
                    messages=[{
                        "role": "user",
                        "content": f"""
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {component_type}
–ò–º—è —Å–µ—Ä–≤–∏—Å–∞: {service_name}
–û–ø–∏—Å–∞–Ω–∏–µ: {config.get('description', 'N/A')}

–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {prompt}

–ú–∞–Ω–∏—Ñ–µ—Å—Ç—ã (—á–∞—Å—Ç–∏—á–Ω–æ):
{manifests_text}

–°–æ–∑–¥–∞–π runbook –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–ø–ª–æ—è.
"""
                    }]
                ),
                timeout=30.0
            )

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            if not response.content:
                raise ValueError("Empty response from Claude API")

            first_block = response.content[0]
            if hasattr(first_block, 'text'):
                docs = first_block.text.strip()
            else:
                raise ValueError(f"Unexpected content type: {type(first_block)}")

            return docs

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
            return self._generate_fallback_documentation(
                component_type, service_name, config
            )

    async def generate_documentation(
        self,
        component_type: str,
        manifests: Dict[str, str]
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é (–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è _generate_documentation)"""
        return await self._generate_documentation(
            component_type=component_type,
            service_name=f"{component_type}-service",
            manifests=manifests,
            prompt=""
        )

    async def generate_cicd(
        self,
        platform: str,
        project_type: str,
        include_security: bool = True
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CI/CD pipeline –∏—Å–ø–æ–ª—å–∑—É—è LLM

        Args:
            platform: 'gitlab' –∏–ª–∏ 'github'
            project_type: –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞
            include_security: –í–∫–ª—é—á–∏—Ç—å security —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

        Returns:
            YAML –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        """
        system_prompt = f"""
–¢—ã DevOps —ç–∫—Å–ø–µ—Ä—Ç –¥–ª—è –ú–¢–°.

–°–æ–∑–¥–∞–π CI/CD pipeline –¥–ª—è {platform} ({project_type} –ø—Ä–æ–µ–∫—Ç).

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. Stages: build, test, {'security, ' if include_security else ''}deploy
2. Docker —Å–±–æ—Ä–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
3. –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã —Å coverage
4. {'Security —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (Trivy)' if include_security else ''}
5. –î–µ–ø–ª–æ–π –≤ K8s (staging + production)
6. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MTS Cloud registry

–§–æ—Ä–º–∞—Ç: YAML –¥–ª—è {platform}
–°—Ç–∏–ª—å: Production-ready, —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
"""

        try:
            response = await with_timeout(
                self.client.messages.create(
                    model=self.model,
                    max_tokens=LLMConfig.TOKENS_CICD,
                    temperature=LLMConfig.TEMP_BALANCED,
                    system=system_prompt,
                    messages=[{
                        "role": "user",
                        "content": f"–°–æ–∑–¥–∞–π CI/CD –¥–ª—è {platform}, –ø—Ä–æ–µ–∫—Ç: {project_type}"
                    }]
                ),
                timeout=30.0
            )

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            if not response.content:
                raise ValueError("Empty response from Claude API")

            first_block = response.content[0]
            if hasattr(first_block, 'text'):
                config = first_block.text.strip()
            else:
                raise ValueError(f"Unexpected content type: {type(first_block)}")

            # –ò–∑–≤–ª–µ—á—å YAML
            config = self._extract_code_block(config, "yaml")

            return config

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CI/CD —á–µ—Ä–µ–∑ LLM: {e}", exc_info=True)
            logger.warning("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —à–∞–±–ª–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä")
            # Fallback –Ω–∞ —à–∞–±–ª–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            try:
                from ..tools.cicd_generator import CICDGenerator
                gen = CICDGenerator()
                return gen.generate_pipeline(platform, project_type, include_security)
            except Exception as fallback_error:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ fallback –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {fallback_error}", exc_info=True)
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å CI/CD –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {fallback_error}")

    def _format_components_list(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è LLM"""
        lines = []
        for comp_type, config in TELECOM_COMPONENTS.items():
            desc = config.get("description", "")
            lines.append(f"- {comp_type}: {desc}")
        return "\n".join(lines)

    def _generate_fallback_documentation(
        self,
        component_type: str,
        service_name: str,
        config: Dict[str, Any]
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é (fallback)"""
        return f"""# Runbook: {service_name}

## –û–ø–∏—Å–∞–Ω–∏–µ
–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {component_type}
{config.get('description', '–¢–µ–ª–µ–∫–æ–º-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç')}

## Prerequisites
- Kubernetes cluster (–ú–¢–° Cloud)
- kubectl –Ω–∞—Å—Ç—Ä–æ–µ–Ω
- –î–æ—Å—Ç—É–ø –∫ namespace `telecom`

## Deployment
```bash
# –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç—ã
kubectl apply -f output/

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
kubectl get pods -n telecom -l app={service_name}
kubectl rollout status deployment/{service_name} -n telecom
```

## Verification
```bash
# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å health
kubectl exec -n telecom deployment/{service_name} -- curl localhost:8080/health

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å logs
kubectl logs -n telecom deployment/{service_name} --tail=50
```

## Monitoring
- Prometheus metrics: http://prometheus.mts.ru
- Grafana dashboard: http://grafana.mts.ru

## Rollback
```bash
# –û—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
kubectl rollout undo deployment/{service_name} -n telecom
```
"""
