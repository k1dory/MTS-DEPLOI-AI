apiVersion: apps/v1
kind: Deployment
metadata:
  name: billing
  namespace: telecom
  labels:
    app: billing
    component: billing
    operator: mts
    tier: telecom
spec:
  replicas: 3
  selector:
    matchLabels:
      app: billing

  template:
    metadata:
      labels:
        app: billing
        component: billing
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"

    spec:
      # Высокая доступность - каждый pod на отдельном узле
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - billing
            topologyKey: kubernetes.io/hostname

      priorityClassName: high-priority

      containers:
      - name: billing
        image: registry.mts.ru/telecom/billing:latest
        imagePullPolicy: IfNotPresent

        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "4"
            memory: "8Gi"

        env:
        - name: COMPONENT_TYPE
          value: "billing"
        - name: LOG_LEVEL
          value: "INFO"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: billing-secrets
              key: database-url
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: billing-secrets
              key: rabbitmq-url
        - name: APP_ENV
          value: "production"
        - name: WORKERS
          value: "4"

        envFrom:
        - configMapRef:
            name: billing-config

        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP

        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3

        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL

        volumeMounts:
        - name: app-config
          mountPath: /app/config
          readOnly: true

      volumes:
      - name: app-config
        configMap:
          name: billing-config
